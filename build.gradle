apply plugin: 'c'
apply plugin: 'cpp'
apply plugin : 'java'

//TODO : Clean old folders

task copyToCDistribution(type: Copy) {
  def d = new File('dist/c/')
  d.mkdirs()

  from '/src/crc16/c/','/src/crc16/headers/','/src/framing/c/',
  '/src/framing/headers/','/src/telemetry/c/', '/src/telemetry/headers/',
  '/drivers/c/base/'
  into 'dist/c/'
  include '**.c','**.h'
}

task copyToCppDistribution(type: Copy) {
  def d = new File('dist/cpp/c_api/')
  d.mkdirs()

  from '/src/crc16/c/','/src/crc16/headers/','/src/framing/c/',
  '/src/framing/headers/','/src/telemetry/c/', '/src/telemetry/headers/'
  into 'dist/cpp/c_api/'
  include '**.c','**.h'
}

task copyToMbedDistribution(type: Copy) {
  def d = new File('dist/mbed/c_api/')
  d.mkdirs()

  from '/src/crc16/c/','/src/crc16/headers/','/src/framing/c/',
  '/src/framing/headers/','/src/telemetry/c/', '/src/telemetry/headers/'
  into 'dist/mbed/c_api/'
  include '**.c','**.h'
}

task copyCppInterfaceAndDriver(type: Copy) {
  from '/cpp_interface/','/drivers/cpp/base/'
  into 'dist/cpp/'
  include '**.c','**.h','**.cpp','**.hpp'
}

task copyMbedInterfaceAndDriver(type: Copy) {
  from '/cpp_interface/','/drivers/cpp/mbed/'
  into 'dist/mbed/'
  include '**.c','**.h','**.cpp','**.hpp'
}

// distributes the C api.
// Copies files from src/ folders into dist/c folder
// Copies driverBase.h file into dist/c
task distributeC() {
  dependsOn << copyToCDistribution
}

// distributes the C++ api.
// Copies files from src/ folders into dist/cpp folder
// Copies driverBase.h file into dist/cpp
// Copies interface/cpp/* into dist/cpp

task distributeCpp() {
  dependsOn << copyToCppDistribution
  dependsOn << copyCppInterfaceAndDriver
}

// distributes the Mbed api.
// Copies files from src/ folders into dist/cpp folder
// Copies driverMbed.h file into dist/cpp
// Copies interface/cpp/* into dist/cpp

task distributeMbed() {
  dependsOn << copyToMbedDistribution
  dependsOn << copyMbedInterfaceAndDriver
}

model {
  buildTypes {
      debug
      release
  }

  toolChains {
    gcc(Gcc) {

    }
  }

  components {
    crc16(NativeLibrarySpec){

    }
    framing(NativeLibrarySpec) {

    }
    telemetry(NativeLibrarySpec) {
      binaries.all {
        lib library: "crc16"
        lib library: "framing"
      }
    }
    tests(NativeExecutableSpec) {
       binaries.all {
         lib library: "telemetry"
         lib library: "crc16"
         lib library: "framing"
       }
     }

     crc16pp(NativeLibrarySpec){
       sources {
            cpp {
              source {
                  srcDirs "src/crc16/c"
                  include "**/*.c"
              }
              exportedHeaders {
                  srcDirs "src/crc16/headers"
              }
          }
        }
     }
     framingpp(NativeLibrarySpec) {
       sources {
            cpp {
              source {
                  srcDirs "src/framing/c"
                  include "**/*.c"
              }
              exportedHeaders {
                  srcDirs "src/framing/headers"
              }
          }
        }
     }
     telemetrypp(NativeLibrarySpec) {
       binaries.all {
         lib library: "crc16pp"
         lib library: "framingpp"
       }
       sources {
            cpp {
              source {
                  srcDirs "src/telemetry/c"
                  include "**/*.c"
              }
              exportedHeaders {
                  srcDirs "src/telemetry/headers"
              }
          }
        }
     }
     testspp(NativeExecutableSpec) {
        binaries.all {
          lib library: "telemetrypp"
          lib library: "crc16pp"
          lib library: "framingpp"
        }
        sources {
          cpp {
            source {
               srcDirs "src/tests/c"
               include "**/*.c"
            }
            exportedHeaders {
               srcDirs "src/tests/headers"
            }
          }
       }
    }

    bufferedSerialMock(NativeLibrarySpec) {
      sources {
        cpp {
          source {
             srcDirs "mocks/cpp/bufferedserial/"
             include "BufferedSerial.c"
          }
          exportedHeaders {
            srcDirs "mocks/cpp/bufferedserial/"
            include "BufferedSerial.h"
          }
        }
      }
    }

    telemetryMbedVariant(NativeLibrarySpec) {
      binaries.all {
        lib library: "bufferedSerialMock"
      }
      sources {
        cpp {
          source {
             srcDirs "dist/mbed/"
             include "**/*.c", "**/*.cpp"
          }
          exportedHeaders {
            srcDirs "dist/mbed/"
            include "**/*.h", "**/*.hpp"
          }
        }
      }
    }
  }
}
